import ollama
from utils.chat import Deepseek_Generate
import re



async def case_organize(raw_doc,case_dict,case_demonstrate,insight_dict):
    # 核心主题，案例描述，案例论证，个人见解
    result_dict = {}
    prompt_sys = f"""你是一个经验丰富的编辑，擅长将不同的内容整合成一个连贯的文本。你的任务是根据输入的章节内容、核心主题、详细案例、案例论证及案例补充，组织语言形成连贯的段落。你可以按照以下步骤进行操作。
----步骤----
1. 以一个引人入胜的问题或者陈述开始，引出章节的核心主题。
2. 简要概述观点或提供结论，为后续的论证铺垫。
3. 通过一个详细的、相关的具体案例，清楚说明该案例与核心主题的关联。
4. 进一步扩展案例，来使内容更加丰富和深入，最终帮助听众获得更全面、更有深度的知识。
5. 将以上内容整合成一个连贯的段落，确保信息流畅衔接，不要让读者感到某个概念突然出现或跳跃。
----格式要求----
你必须以不带任何格式信息的纯文本输出结果，不要返回任何提纲类信息。
----输出示例----
呃，抱怨的作用是什么呢？第一个作用，比如说能够情感宣泄，很多人抱怨是为了宣泄情感。但是如果你抱怨不佳，有时候甚至会遭受到打击。连这个宣泄情感的目的都没完成，反而会受伤。这里边有个案例，一个女孩儿跟男朋友去酒吧，结果那个男朋友呢老盯着别的女孩看，这个女孩就很生气，说你不要再看了，结果两个人闹掰了，这个男孩儿就说分手，她跑到这个洗手间去补妆，哭哭的很难过。然后旁边站着一个女的也在那补妆，她说男人都是混蛋，跟那个女孩抱怨，那个女孩冷冰冰的说了一句，我怎么知道你不是混蛋，说完以后就走掉了。哇，这个这个苦主就特别难过，说想找人倾诉一下，结果还被人怼了一下。我们生活当中也会遇到这样的情况，你去找别人倾诉，结果效果更糟糕。所以作者说这儿有一个抱怨的安全指南啊，你在抱怨之前至少应该搞明白几件事儿。首先我们倾诉的对象能否理解和支持我们，你别见人就说对吧？见人就是说很容易被怼。第二，我们倾诉对象的处境是否适宜表现理解和支持啊，啥意思呢？比如说你去这个医院。探望一个朋友，人家住院去探望朋友。然后你去了以后，你你跟他抱怨说这医院停车真难，哎呀，真是太费劲了。你说这样的抱怨，对人这生病的人来讲，这形成了更大的压力啊，这反而没法对你表示同情。第三，抱怨的话题是否与我们的倾听者有关系是吧？就如果这倾听者根本就不理解这件事儿，根本就不懂这件事。你跟他说再多没有用，就包括很多大人呢喜欢跟自己的孩子抱怨自己的配偶，这就很糟糕。因为孩子根本理解不了你们的世界，孩子根本不知道你们俩到底是谁怪谁什么关系。但是你整天跟孩子倾诉啊，你你老爸多不靠谱，你老爸对我不好，怎么怎么样，孩子也帮不上忙啊，所以抱怨要讲究对象啊。
"""
    for key,value in case_dict.items():
        prompt_text = f"""----章节内容----
{raw_doc}
----核心主题----
{key}
----详细案例----
{value}
----案例论证----
{case_demonstrate[key]}
----案例补充----
{insight_dict[key]}
"""
        prompt_text = prompt_text.replace('\n\n', '\n')
        result = Deepseek_Generate(prompt_text, prompt_sys)
        result_dict[key] = result
    return result_dict


async def case_change_style(case_dict):
    result_dict = {}
    prompt_sys = f"""你是一个经验丰富的书本解读者，擅长以通俗易懂的解读方式，帮助听众轻松领悟书中精华。
你的任务是根据输入信息，将主题内容以口语化、第三人称的方式重新表达，使听众更易理解。你可以按照以下步骤完成任务。
----步骤----
1. 将书面语的长句子拆分为短小、易懂的句子，尽量少用复杂的修饰词。口语表达要自然、轻松，避免过于正式或复杂的语言结构。
2. 适当加入口语常用的词汇、短语和语气词，让表达显得更生活化。也可以用“嗯”“啊”等词填充对话空隙，模仿真实交流中的停顿。
3. 可以通过提问和假设场景引导听众思考，增强互动感。口语风格常常通过提问或与听众对话来激发兴趣。
4. 将以上内容整合成一个连贯的口语化段落，确保信息自然过渡、流畅衔接。
----格式要求----
你必须以不带任何格式信息的纯文本输出结果，不要返回任何提纲类信息。
"""
    for key, value in case_dict.items():
        prompt_text = f"""----核心主题----
{key}
----主题内容----
{value}
"""
        prompt_text = prompt_text.replace('\n\n', '\n')
        result = Deepseek_Generate(prompt_text, prompt_sys)
        result_dict[key] = result
    return result_dict


async def oral_refine(organize_text,oral_text,feedback):
    prompt_sys = f"""你是一个书本解读者，你已经对主题内容进行了口语化改写，并收到了修改建议。你的任务是对照修改建议，将口语化改写文本进行完善，确保讲稿生动、流畅、且能够引起听众兴趣。请仅返回修改后的口语化改写文本，不要返回任何无关文字。"""
    new_dict = {}
    wrong_key = []
    for key, value in feedback.items():
        if feedback[key].startswith('是'):
            new_dict[key] = oral_text[key]
            continue
        else:
            wrong_key.append(key)
            prompt_text = f"""----主题----
{key}
----主题内容----
{organize_text[key]}
----口语化改写文本----
{oral_text[key]}
----修改建议----
{feedback[key]}
"""
            result = Deepseek_Generate(prompt_text, prompt_sys)
            new_dict[key] = result
    wrong_key_str = "<".join(wrong_key)
    return new_dict,wrong_key_str

async def case_assemble2(raw_doc,case_dict):
    prompt_sys = f"""你是一个经验丰富的编辑，擅长将不同的内容整合成流利连贯的段落。你的任务是将各个片段整合成自然、易懂的口语化解读文本。你必须确保输出遵循以下要求。
----要求----
1. 每个片段之间需要自然的过渡，避免跳跃。你可以通过设问、类比、或承接前面的内容，引导听众自然过渡到新的片段。
2. 确保所有片段的语调和风格一致，保持风格的连贯性。
3. 对于片段中的重复案例，应该进行整合，避免冗余。
4. 不要包含任何开头语或结尾语如“今天我们探讨一个问题”等，直接开始讲解。
5. 在讲解的最后，对主题进行总结，并提出自己的观点或启示，提炼关键教训或原则，鼓励听众反思或行动。
6. 以不带任何格式的纯文本形式返回讲稿，不要包含任何副主题或提纲信息，不要返回任何无关讲稿的内容。
"""
    prompt_text = ""
    tmp = f"""----要求----
        1. 在主题之间添加过渡句，使整个讲稿连贯流畅。
        2. 不要包含任何开头语或结尾语如“今天我们探讨一个问题”等，直接开始讲解。
        3. 采用自然、口语化的表达方式，组织语言将所有主题内容串联成连贯的解读讲稿，向听众解释主题的核心内容。
        4. 以不带任何格式的纯文本形式返回讲稿，不要包含任何副主题或提纲信息，不要返回任何无关讲稿的内容。
        """
    cur = 1
    tmp_result = []
    for key, value in case_dict.items():

        if len(tmp_result) == 0:  # 开头
            prompt_tmp = f"""片段 {cur}: {value}
"""
            prompt_text += prompt_tmp
            cur += 1
        else:  # 中间迭代
            prompt_text = ""
            prompt_text += f"""片段 1: {tmp_result[-1]}
"""
            prompt_text += f"""片段 2: {value}
"""
            cur += 1

        if cur >= 3:
            result = Deepseek_Generate(prompt_text, prompt_sys)
            tmp_result.append(result)
    return tmp_result[-1]


async def case_assemble3(raw_doc,case_dict):
    prompt_sys = f"""你是一个专业的书本解读者，擅长将不同的内容整合成流利连贯的段落。你的任务是将各个片段整合成自然、易懂的口语化解读文本。你必须确保输出遵循以下要求。
----要求----
1. 每个片段之间需要自然的过渡，避免跳跃。你可以通过设问、类比、或承接前面的内容，引导听众自然过渡到新的片段。
2. 确保所有片段的语调和风格一致，保持风格的连贯性。
3. 对于片段中的重复案例，应该进行整合，避免冗余。
4. 不要包含任何开头语或结尾语如“今天我们探讨一个问题”等，直接开始讲解。
5. 在讲解的最后，对主题进行总结，并提出自己的观点或启示，提炼关键教训或原则，鼓励听众反思或行动。
6. 以不带任何格式的纯文本形式返回讲稿，不要包含任何副主题或提纲信息，不要返回任何无关讲稿的内容。
你可以按照以下步骤进行操作：
----步骤----
1. 明确解读的主线和逻辑结构，确定每个片段在整个章节中的作用，并制定清晰的解读框架。
2. 用一个场景、问题或故事快速吸引听众注意力，让听众明白接下来的内容为何重要。
3. 采用自然、口语化的表达方式，组织语言将所有主题内容串联成连贯的解读讲稿，向听众解释主题的核心内容。保持整体口语化表达，适当融入互动，增强听众参与感。
4. 在讲解的最后，对主题进行总结，提炼关键教训或原则，鼓励听众反思或行动。
"""
    prompt_text = ""
    tmp = f"""----要求----
        1. 在主题之间添加过渡句，使整个讲稿连贯流畅。
        2. 不要包含任何开头语或结尾语如“今天我们探讨一个问题”等，直接开始讲解。
        3. 采用自然、口语化的表达方式，组织语言将所有主题内容串联成连贯的解读讲稿，向听众解释主题的核心内容。
        4. 以不带任何格式的纯文本形式返回讲稿，不要包含任何副主题或提纲信息，不要返回任何无关讲稿的内容。
        """
    cur = 1
    for key, value in case_dict.items():
        prompt_text+= f"""片段 {cur}: {value}
"""
        cur+=1
    print("----------------最终讲稿-----------------")
    result = Deepseek_Generate(prompt_text, prompt_sys)
    print(result)
    print("---------------------------------")
    return result